import hashlib
import time
from typing import List

class Block:
    def __init__(self, index: int, timestamp: str, data: str, previous_hash: str):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.calculate_hash()

    def calculate_hash(self) -> str:
        return hashlib.sha256(f"{self.index}{self.timestamp}{self.data}{self.previous_hash}{self.nonce}".encode()).hexdigest()

    def mine_block(self, difficulty: int):
        while self.hash[:difficulty] != "0" * difficulty:
            self.nonce += 1
            self.hash = self.calculate_hash()
        print(f"Block mined: {self.hash}")

class Blockchain:
    def __init__(self):
        self.chain: List[Block] = [self.create_genesis_block()]
        self.difficulty = 4

    def create_genesis_block(self) -> Block:
        return Block(0, time.time(), "Genesis Block", "0")

    def get_latest_block(self) -> Block:
        return self.chain[-1]

    def add_block(self, new_block: Block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.mine_block(self.difficulty)
        self.chain.append(new_block)

    def is_chain_valid(self) -> bool:
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]

            if current_block.hash != current_block.calculate_hash():
                print("Current block hash is invalid")
                return False

            if current_block.previous_hash != previous_block.hash:
                print("Previous block hash is invalid")
                return False

        return True

# Example Usage
if __name__ == "__main__":
    my_blockchain = Blockchain()

    print("Mining block 1...")
    my_blockchain.add_block(Block(1, time.time(), "Block 1 Data", my_blockchain.get_latest_block().hash))

    print("Mining block 2...")
    my_blockchain.add_block(Block(2, time.time(), "Block 2 Data", my_blockchain.get_latest_block().hash))

    print("Is blockchain valid?", my_blockchain.is_chain_valid())

    for block in my_blockchain.chain:
        print(f"Index: {block.index}, Timestamp: {block.timestamp}, Data: {block.data}, Hash: {block.hash}")
